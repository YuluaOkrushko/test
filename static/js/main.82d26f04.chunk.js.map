{"version":3,"sources":["App.js","index.js"],"names":["App","useState","time","setTime","pause","setPause","timer$","interval","useEffect","startTimer","pipe","startWith","scan","share","subscribe","i","unsubscribe","className","Date","toISOString","substr","date","onClick","e","click$","fromEvent","target","type","buffer","debounceTime","map","clicks","length","filter","clicksLenght","console","log","ReactDOM","render","document","querySelector"],"mappings":"qPAae,SAASA,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,oBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACIC,EAASC,YAAS,KAEtBC,qBAAU,WACR,IAAIC,EAaJ,OAXAA,EAAaH,EACVI,KACCC,YAAUT,GACVU,aAAK,SAACV,GAAD,OAAUA,EAAO,KACtBW,eAEDC,WAAU,SAACC,GACLX,GACHD,EAAQY,MAGP,kBAAMN,EAAWO,iBACvB,CAACZ,EAAOF,EAAMI,IAyCjB,OACE,sBAAKW,UAAU,YAAf,UACE,sBAAMA,UAAU,QAAhB,SANS,SAACf,GACZ,OAAO,IAAIgB,KAAY,IAAPhB,GAAaiB,cAAcC,OAAO,GAAI,GAK3BC,CAAKnB,KAC7BE,GACC,wBAAQkB,QAzCM,WAClBjB,GAAS,IAwCyBY,UAAU,SAAxC,oBAIAb,GACA,wBAAQkB,QAxCK,WACjBjB,GAAS,GACTF,EAAQ,IAsCyBc,UAAU,SAAvC,mBAIAb,GAASF,EAAO,GAChB,wBAAQoB,QA/BK,SAACC,GAClB,IAAMC,EAASC,YAAUF,EAAEG,OAAQH,EAAEI,MAChBH,EAAOd,KAC1BkB,YAAOJ,EAAOd,KAAKmB,YAAa,OAChCC,aAAI,SAACC,GAAD,OAAYA,EAAOC,UACvBC,aAAO,SAACC,GAAD,OAAkBA,GAAgB,MAE9BpB,WAAU,WACrBqB,QAAQC,IAAI,aACZ/B,GAAS,OAsBsBY,UAAU,SAAvC,kBAIDf,EAAO,GACN,wBAAQoB,QA3CM,WAClBjB,GAAS,GACTF,EAAQ,IAyC0Bc,UAAU,SAAxC,sBCzFRoB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.82d26f04.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { interval, fromEvent } from \"rxjs\";\nimport {\n  map,\n  scan,\n  buffer,\n  startWith,\n  debounceTime,\n  share,\n  filter,\n} from \"rxjs/operators\";\n\nexport default function App() {\n  const [time, setTime] = useState(0);\n  const [pause, setPause] = useState(true);\n  let timer$ = interval(1000);\n\n  useEffect(() => {\n    let startTimer;\n\n    startTimer = timer$\n      .pipe(\n        startWith(time),\n        scan((time) => time + 1),\n        share()\n      )\n      .subscribe((i) => {\n        if (!pause) {\n          setTime(i);\n        }\n      });\n    return () => startTimer.unsubscribe();\n  }, [pause, time, timer$]);\n\n  // start timer\n\n  const handleStart = () => {\n    setPause(false);\n  };\n\n  //stop timer\n\n  const handleStop = () => {\n    setPause(true);\n    setTime(0);\n  };\n\n  //reset timer\n\n  const handleReset = () => {\n    setPause(false);\n    setTime(0);\n  };\n\n  //wait timer\n\n  const handleWait = (e) => {\n    const click$ = fromEvent(e.target, e.type);\n    const doubleClick$ = click$.pipe(\n      buffer(click$.pipe(debounceTime(300))),\n      map((clicks) => clicks.length),\n      filter((clicksLenght) => clicksLenght >= 2)\n    );\n    doubleClick$.subscribe(() => {\n      console.log(\"It works!\");\n      setPause(true);\n    });\n  };\n\n  const date = (time) => {\n    return new Date(time * 1000).toISOString().substr(11, 8);\n  };\n\n  return (\n    <div className=\"container\">\n      <span className=\"timer\">{date(time)}</span>\n      {pause && (\n        <button onClick={handleStart} className=\"button\">\n          Start\n        </button>\n      )}\n      {!pause && (\n        <button onClick={handleStop} className=\"button\">\n          Stop\n        </button>\n      )}\n      {!pause && time > 0 && (\n        <button onClick={handleWait} className=\"button\">\n          Wait\n        </button>\n      )}\n      {time > 0 && (\n        <button onClick={handleReset} className=\"button\">\n          Reset\n        </button>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}